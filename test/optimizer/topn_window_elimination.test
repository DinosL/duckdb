# name: test/optimizer/topn_window_elimination.test
# description: Test Top-N Window Elimination Rule
# group: [optimizer]

statement ok
PRAGMA enable_verification

statement ok
PRAGMA explain_output = OPTIMIZED_ONLY;

statement ok
CREATE TABLE tbl AS SELECT i % 4 grp, i val_1, CAST(i AS VARCHAR) val_2 FROM range(100) tbl(i)

# Window functions
query IIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_1 DESC) as rn, *
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
1	0	96	96
1	1	97	97
1	2	98	98
1	3	99	99

query II
EXPLAIN SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_1 DESC) as rn, *
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
logical_opt	<!REGEX>:.*FILTER.*WINDOW.*

query III
SELECT * EXCLUDE (rn) FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_1 DESC) as rn, *
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
0	96	96
1	97	97
2	98	98
3	99	99

query IIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_1 DESC) as rn, *
	FROM tbl
	QUALIFY rn <= 2
)
ORDER BY grp, rn
----
1	0	96	96
2	0	92	92
1	1	97	97
2	1	93	93
1	2	98	98
2	2	94	94
1	3	99	99
2	3	95	95

query IIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_1 DESC) as rn, *
	FROM tbl
	WHERE val_2 < '50'
	QUALIFY rn <= 1
)
ORDER BY ALL
----
1	0	48	48
1	1	49	49
1	2	46	46
1	3	47	47

query IIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_1 ASC) as rn, *
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
1	0	0	0
1	1	1	1
1	2	2	2
1	3	3	3

query II
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_2 DESC) as rn, val_2
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY rn, val_2
----
1	96
1	97
1	98
1	99

query III
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_2 DESC) as rn, grp, val_2
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY rn, val_2
----
1	0	96
1	1	97
1	2	98
1	3	99

query III
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_2 DESC) as rn, grp, val_2
	FROM tbl
	QUALIFY rn <= 2
)
ORDER BY rn, val_2
----
1	0	96
1	1	97
1	2	98
1	3	99
2	0	92
2	1	93
2	2	94
2	3	95

query II
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_2 DESC) as rn, val_2
	FROM tbl
	QUALIFY rn <= 2
)
ORDER BY rn, val_2
----
1	96
1	97
1	98
1	99
2	92
2	93
2	94
2	95

query III
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_1 DESC) as rn, grp, val_2
	FROM tbl
	WHERE val_2 < '50'
	QUALIFY rn <= 1
)
ORDER BY ALL
----
1	0	48
1	1	49
1	2	46
1	3	47

query III
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_1 DESC) as rn, grp, val_2
	FROM tbl
	QUALIFY rn <= 2
)
ORDER BY ALL
----
1	0	96
1	1	97
1	2	98
1	3	99
2	0	92
2	1	93
2	2	94
2	3	95

statement ok
CREATE TABLE tbl2 AS SELECT * FROM tbl WHERE grp <> 1 OR val_1 = 1

query IIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY val_1 DESC) as rn, *
	FROM tbl2
	QUALIFY rn <= 2
)
ORDER BY grp, rn
----
1	0	96	96
2	0	92	92
1	1	1	1
1	2	98	98
2	2	94	94
1	3	99	99
2	3	95	95

statement ok
CREATE TABLE tbl3 AS SELECT i % 4 grp, i % 2 grp2, i val_1, CAST(i AS VARCHAR) val_2 FROM range(100) tbl(i)

query III
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp, grp2 ORDER BY val_1 DESC) as rn, grp2, val_2
	FROM tbl3
	QUALIFY rn <= 1
)
ORDER BY ALL
----
1	0	96
1	0	98
1	1	97
1	1	99

# Lateral joins
query III
SELECT t2.*
FROM (
	SELECT DISTINCT(grp)
	FROM tbl
) t1
INNER JOIN LATERAL (
    SELECT *
    FROM tbl t2
    WHERE t1.grp = t2.grp
    ORDER BY val_1 DESC
    LIMIT 1
) t2 ON true
ORDER BY ALL
----
0	96	96
1	97	97
2	98	98
3	99	99

query III
SELECT t2.*
FROM (
	SELECT DISTINCT(grp)
	FROM tbl
) t1
INNER JOIN LATERAL (
    SELECT *
    FROM tbl t2
    WHERE t1.grp = t2.grp
    ORDER BY val_1 DESC
    LIMIT 2
) t2 ON true
ORDER BY ALL
----
0	92	92
0	96	96
1	93	93
1	97	97
2	94	94
2	98	98
3	95	95
3	99	99

query III
SELECT t2.*
FROM (
	SELECT DISTINCT(grp)
	FROM tbl
) t1
INNER JOIN LATERAL (
    SELECT *
    FROM tbl t2
    WHERE t1.grp = t2.grp
    ORDER BY val_1 ASC
    LIMIT 1
) t2 ON true
ORDER BY ALL
----
0	0	0
1	1	1
2	2	2
3	3	3

query II
EXPLAIN SELECT t1.*
FROM tbl t1
INNER JOIN LATERAL (
    SELECT *
    FROM tbl t2
    WHERE t1.grp = t2.grp
    ORDER BY val_1 DESC
    LIMIT 1
) b ON true
----
logical_opt	<!REGEX>:.*FILTER.*WINDOW.*

# Vector functions

statement ok
CREATE TABLE vectors AS
SELECT [x,y,z] AS vec, row_number() OVER () AS id
FROM range(0,10) r(x), range(0,10) rr(y), range(0, 10) rrr(z)

statement ok
CREATE OR REPLACE TABLE with_optimizer AS SELECT * EXCLUDE (rn)
FROM (SELECT *, list_distance(vec, [5,5,5]) AS dist, row_number() over (ORDER BY dist ASC) as rn FROM vectors)
WHERE rn <= 7

statement ok
set disabled_optimizers = 'top_n_window_elimination'

statement ok
CREATE OR REPLACE TABLE without_optimizer AS SELECT * EXCLUDE (rn)
FROM (SELECT *, list_distance(vec, [5,5,5]) AS dist, row_number() over (ORDER BY dist ASC) as rn FROM vectors)
WHERE rn <= 7

statement ok
set disabled_optimizers = ''

query III
SELECT * FROM (FROM with_optimizer) EXCEPT (FROM without_optimizer);
----

statement ok
CREATE OR REPLACE TABLE with_optimizer AS SELECT a.id, a.vec, neighbor.id as nbr_id, neighbor.vec as nbr_vec
FROM vectors as a, LATERAL (
	SELECT *, b.id
	FROM vectors as b
	ORDER BY list_distance(a.vec, b.vec) LIMIT 1
) as neighbor
ORDER BY a.id, list_distance(a.vec, neighbor.vec);

statement ok
set disabled_optimizers = 'top_n_window_elimination'

statement ok
CREATE OR REPLACE TABLE without_optimizer AS SELECT a.id, a.vec, neighbor.id as nbr_id, neighbor.vec as nbr_vec
FROM vectors as a, LATERAL (
	SELECT *, b.id
	FROM vectors as b
	ORDER BY list_distance(a.vec, b.vec) LIMIT 1
) as neighbor
ORDER BY a.id, list_distance(a.vec, neighbor.vec);

query IIII
SELECT * FROM (FROM with_optimizer) EXCEPT (FROM without_optimizer);
---
