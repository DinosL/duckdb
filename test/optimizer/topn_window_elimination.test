# name: test/optimizer/topn_window_elimination.test
# description: Test Top-N Window Elimination Rule
# group: [optimizer]

statement ok
PRAGMA enable_verification

statement ok
PRAGMA explain_output = OPTIMIZED_ONLY;

statement ok
CREATE TABLE tbl AS SELECT * FROM VALUES (0, {'x': 0}, 0, 0), (0, {'x': 1}, -1, 1), (1, {'x': 2}, 2, 2), (null, {'x': 3}, 3, 3), (null, {'x': 4}, 3, 4), t(grp, a, b, c)

# Window functions
query II
EXPLAIN SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY b DESC) as rn, *
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
logical_opt	<!REGEX>:.*FILTER.*WINDOW.*

query II
EXPLAIN SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY b DESC) as rn, grp, b
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
logical_opt	<!REGEX>:.*UNNEST.*struct_pack.*

query II
EXPLAIN SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY b DESC) as rn, *
	FROM (SELECT * FROM VALUES (0, {'x': 0}, 0, 0), (0, {'x': 1}, null, 1) t(grp, a, b, c))
	QUALIFY rn <= 2
)
ORDER BY ALL
----
logical_opt	<REGEX>:.*FILTER.*WINDOW.*

query IIIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY b DESC) as rn, *
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
1	0	{'x': 0}	0	0
1	1	{'x': 2}	2	2
1	NULL	{'x': 3}	3	3

query IIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY b DESC) as rn, grp, a, b
	FROM tbl
	QUALIFY rn <= 2
)
ORDER BY ALL
----
1	0	{'x': 0}	0
1	1	{'x': 2}	2
1	NULL	{'x': 4}	3
2	0	{'x': 1}	-1
2	NULL	{'x': 3}	3

query IIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY a.x = b) as rn, grp, a, b
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
1	0	{'x': 1}	-1
1	1	{'x': 2}	2
1	NULL	{'x': 4}	3

query IIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp, b ORDER BY a.x) as rn, grp, a, b
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
1	0	{'x': 0}	0
1	0	{'x': 1}	-1
1	1	{'x': 2}	2
1	NULL	{'x': 3}	3

query IIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp, b ORDER BY a.x = b) as rn, grp, a, b
	FROM tbl
	QUALIFY rn <= 1
)
ORDER BY ALL
----
1	0	{'x': 0}	0
1	0	{'x': 1}	-1
1	1	{'x': 2}	2
1	NULL	{'x': 4}	3

query IIIII
SELECT * FROM (
	SELECT row_number() OVER (PARTITION BY grp ORDER BY b DESC) as rn, c, b, a, grp
	FROM tbl
	QUALIFY rn <= 2
)
ORDER BY ALL
----
1	0	0	{'x': 0}	0
1	2	2	{'x': 2}	1
1	4	3	{'x': 4}	NULL
2	1	-1	{'x': 1}	0
2	3	3	{'x': 3}	NULL

# Lateral joins
query II
EXPLAIN SELECT t1.*
FROM tbl t1
INNER JOIN LATERAL (
    SELECT *
    FROM tbl t2
    WHERE t1.grp = t2.grp
    ORDER BY b DESC
    LIMIT 1
) ON true
----
logical_opt	<!REGEX>:.*FILTER.*WINDOW.*

query IIII
SELECT t2.*
FROM (
	SELECT DISTINCT(grp)
	FROM tbl
) t1
INNER JOIN LATERAL (
    SELECT *
    FROM tbl t2
    WHERE t1.grp = t2.grp
    ORDER BY b DESC
    LIMIT 1
) t2 ON true
ORDER BY ALL
----
0	{'x': 0}	0	0
1	{'x': 2}	2	2

query IIII
SELECT t2.*
FROM (
	SELECT DISTINCT(grp)
	FROM tbl
) t1
INNER JOIN LATERAL (
    SELECT *
    FROM tbl t2
    WHERE t1.grp = t2.grp
   	  OR (t1.grp = NULL AND t2.grp = NULL)
    ORDER BY b DESC
    LIMIT 2
) t2 ON true
ORDER BY ALL
----
0	{'x': 0}	0	0
0	{'x': 1}	-1	1
1	{'x': 2}	2	2

# Vector functions
statement ok
CREATE TABLE vectors AS
SELECT [x,y,z] AS vec, row_number() OVER () AS id
FROM range(0,10) r(x), range(0,10) rr(y), range(0, 10) rrr(z)

statement ok
CREATE OR REPLACE TABLE with_optimizer AS SELECT * EXCLUDE (rn)
FROM (SELECT *, list_distance(vec, [5,5,5]) AS dist, row_number() over (ORDER BY dist ASC) as rn FROM vectors)
WHERE rn <= 7

statement ok
set disabled_optimizers = 'top_n_window_elimination'

statement ok
CREATE OR REPLACE TABLE without_optimizer AS SELECT * EXCLUDE (rn)
FROM (SELECT *, list_distance(vec, [5,5,5]) AS dist, row_number() over (ORDER BY dist ASC) as rn FROM vectors)
WHERE rn <= 7

statement ok
set disabled_optimizers = ''

query III
SELECT * FROM (FROM with_optimizer) EXCEPT (FROM without_optimizer);
----

statement ok
CREATE OR REPLACE TABLE with_optimizer AS SELECT a.id, a.vec, neighbor.id as nbr_id, neighbor.vec as nbr_vec
FROM vectors as a, LATERAL (
	SELECT *, b.id
	FROM vectors as b
	ORDER BY list_distance(a.vec, b.vec) LIMIT 1
) as neighbor
ORDER BY a.id, list_distance(a.vec, neighbor.vec);

statement ok
set disabled_optimizers = 'top_n_window_elimination'

statement ok
CREATE OR REPLACE TABLE without_optimizer AS SELECT a.id, a.vec, neighbor.id as nbr_id, neighbor.vec as nbr_vec
FROM vectors as a, LATERAL (
	SELECT *, b.id
	FROM vectors as b
	ORDER BY list_distance(a.vec, b.vec) LIMIT 1
) as neighbor
ORDER BY a.id, list_distance(a.vec, neighbor.vec);

query IIII
SELECT * FROM (FROM with_optimizer) EXCEPT (FROM without_optimizer);
---
